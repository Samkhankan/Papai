'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet9
    Inherits DataSet
    
    Private tableCounting As CountingDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Counting")) Is Nothing) Then
                Me.Tables.Add(New CountingDataTable(ds.Tables("Counting")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Counting As CountingDataTable
        Get
            Return Me.tableCounting
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet9 = CType(MyBase.Clone,DataSet9)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Counting")) Is Nothing) Then
            Me.Tables.Add(New CountingDataTable(ds.Tables("Counting")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCounting = CType(Me.Tables("Counting"),CountingDataTable)
        If (Not (Me.tableCounting) Is Nothing) Then
            Me.tableCounting.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet9"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet9.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCounting = New CountingDataTable
        Me.Tables.Add(Me.tableCounting)
    End Sub
    
    Private Function ShouldSerializeCounting() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CountingRowChangeEventHandler(ByVal sender As Object, ByVal e As CountingRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CountingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBwater As DataColumn
        
        Private columnDateStart As DataColumn
        
        Private columnid As DataColumn
        
        Private columnOne_Pepsi As DataColumn
        
        Private columnSwater As DataColumn
        
        Private columnTwo_Pepsi As DataColumn
        
        Friend Sub New()
            MyBase.New("Counting")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BwaterColumn As DataColumn
            Get
                Return Me.columnBwater
            End Get
        End Property
        
        Friend ReadOnly Property DateStartColumn As DataColumn
            Get
                Return Me.columnDateStart
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property One_PepsiColumn As DataColumn
            Get
                Return Me.columnOne_Pepsi
            End Get
        End Property
        
        Friend ReadOnly Property SwaterColumn As DataColumn
            Get
                Return Me.columnSwater
            End Get
        End Property
        
        Friend ReadOnly Property Two_PepsiColumn As DataColumn
            Get
                Return Me.columnTwo_Pepsi
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CountingRow
            Get
                Return CType(Me.Rows(index),CountingRow)
            End Get
        End Property
        
        Public Event CountingRowChanged As CountingRowChangeEventHandler
        
        Public Event CountingRowChanging As CountingRowChangeEventHandler
        
        Public Event CountingRowDeleted As CountingRowChangeEventHandler
        
        Public Event CountingRowDeleting As CountingRowChangeEventHandler
        
        Public Overloads Sub AddCountingRow(ByVal row As CountingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCountingRow(ByVal Bwater As Integer, ByVal DateStart As Date, ByVal One_Pepsi As Integer, ByVal Swater As Integer, ByVal Two_Pepsi As Integer) As CountingRow
            Dim rowCountingRow As CountingRow = CType(Me.NewRow,CountingRow)
            rowCountingRow.ItemArray = New Object() {Bwater, DateStart, Nothing, One_Pepsi, Swater, Two_Pepsi}
            Me.Rows.Add(rowCountingRow)
            Return rowCountingRow
        End Function
        
        Public Function FindByid(ByVal id As Integer) As CountingRow
            Return CType(Me.Rows.Find(New Object() {id}),CountingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CountingDataTable = CType(MyBase.Clone,CountingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CountingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBwater = Me.Columns("Bwater")
            Me.columnDateStart = Me.Columns("DateStart")
            Me.columnid = Me.Columns("id")
            Me.columnOne_Pepsi = Me.Columns("One Pepsi")
            Me.columnSwater = Me.Columns("Swater")
            Me.columnTwo_Pepsi = Me.Columns("Two Pepsi")
        End Sub
        
        Private Sub InitClass()
            Me.columnBwater = New DataColumn("Bwater", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBwater)
            Me.columnDateStart = New DataColumn("DateStart", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateStart)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnOne_Pepsi = New DataColumn("One Pepsi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOne_Pepsi)
            Me.columnSwater = New DataColumn("Swater", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSwater)
            Me.columnTwo_Pepsi = New DataColumn("Two Pepsi", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTwo_Pepsi)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        Public Function NewCountingRow() As CountingRow
            Return CType(Me.NewRow,CountingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CountingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CountingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CountingRowChangedEvent) Is Nothing) Then
                RaiseEvent CountingRowChanged(Me, New CountingRowChangeEvent(CType(e.Row,CountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CountingRowChangingEvent) Is Nothing) Then
                RaiseEvent CountingRowChanging(Me, New CountingRowChangeEvent(CType(e.Row,CountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CountingRowDeletedEvent) Is Nothing) Then
                RaiseEvent CountingRowDeleted(Me, New CountingRowChangeEvent(CType(e.Row,CountingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CountingRowDeletingEvent) Is Nothing) Then
                RaiseEvent CountingRowDeleting(Me, New CountingRowChangeEvent(CType(e.Row,CountingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCountingRow(ByVal row As CountingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CountingRow
        Inherits DataRow
        
        Private tableCounting As CountingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCounting = CType(Me.Table,CountingDataTable)
        End Sub
        
        Public Property Bwater As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCounting.BwaterColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCounting.BwaterColumn) = value
            End Set
        End Property
        
        Public Property DateStart As Date
            Get
                Try 
                    Return CType(Me(Me.tableCounting.DateStartColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCounting.DateStartColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableCounting.idColumn),Integer)
            End Get
            Set
                Me(Me.tableCounting.idColumn) = value
            End Set
        End Property
        
        Public Property One_Pepsi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCounting.One_PepsiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCounting.One_PepsiColumn) = value
            End Set
        End Property
        
        Public Property Swater As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCounting.SwaterColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCounting.SwaterColumn) = value
            End Set
        End Property
        
        Public Property Two_Pepsi As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCounting.Two_PepsiColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCounting.Two_PepsiColumn) = value
            End Set
        End Property
        
        Public Function IsBwaterNull() As Boolean
            Return Me.IsNull(Me.tableCounting.BwaterColumn)
        End Function
        
        Public Sub SetBwaterNull()
            Me(Me.tableCounting.BwaterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateStartNull() As Boolean
            Return Me.IsNull(Me.tableCounting.DateStartColumn)
        End Function
        
        Public Sub SetDateStartNull()
            Me(Me.tableCounting.DateStartColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOne_PepsiNull() As Boolean
            Return Me.IsNull(Me.tableCounting.One_PepsiColumn)
        End Function
        
        Public Sub SetOne_PepsiNull()
            Me(Me.tableCounting.One_PepsiColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSwaterNull() As Boolean
            Return Me.IsNull(Me.tableCounting.SwaterColumn)
        End Function
        
        Public Sub SetSwaterNull()
            Me(Me.tableCounting.SwaterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTwo_PepsiNull() As Boolean
            Return Me.IsNull(Me.tableCounting.Two_PepsiColumn)
        End Function
        
        Public Sub SetTwo_PepsiNull()
            Me(Me.tableCounting.Two_PepsiColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CountingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CountingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CountingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CountingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
