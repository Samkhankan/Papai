'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet2
    Inherits DataSet
    
    Private tableOrder As OrderDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Order")) Is Nothing) Then
                Me.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Order As OrderDataTable
        Get
            Return Me.tableOrder
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet2 = CType(MyBase.Clone,DataSet2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Order")) Is Nothing) Then
            Me.Tables.Add(New OrderDataTable(ds.Tables("Order")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOrder = CType(Me.Tables("Order"),OrderDataTable)
        If (Not (Me.tableOrder) Is Nothing) Then
            Me.tableOrder.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet2"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOrder = New OrderDataTable
        Me.Tables.Add(Me.tableOrder)
    End Sub
    
    Private Function ShouldSerializeOrder() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OrderRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnOrder As DataColumn
        
        Private columnOrderQ As DataColumn
        
        Private columnPrice As DataColumn
        
        Private columnTableNo As DataColumn
        
        Private columnCost As DataColumn
        
        Friend Sub New()
            MyBase.New("Order")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property OrderColumn As DataColumn
            Get
                Return Me.columnOrder
            End Get
        End Property
        
        Friend ReadOnly Property OrderQColumn As DataColumn
            Get
                Return Me.columnOrderQ
            End Get
        End Property
        
        Friend ReadOnly Property PriceColumn As DataColumn
            Get
                Return Me.columnPrice
            End Get
        End Property
        
        Friend ReadOnly Property TableNoColumn As DataColumn
            Get
                Return Me.columnTableNo
            End Get
        End Property
        
        Friend ReadOnly Property CostColumn As DataColumn
            Get
                Return Me.columnCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderRow
            Get
                Return CType(Me.Rows(index),OrderRow)
            End Get
        End Property
        
        Public Event OrderRowChanged As OrderRowChangeEventHandler
        
        Public Event OrderRowChanging As OrderRowChangeEventHandler
        
        Public Event OrderRowDeleted As OrderRowChangeEventHandler
        
        Public Event OrderRowDeleting As OrderRowChangeEventHandler
        
        Public Overloads Sub AddOrderRow(ByVal row As OrderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOrderRow(ByVal Order As String, ByVal OrderQ As Integer, ByVal Price As Integer, ByVal TableNo As String, ByVal Cost As Integer) As OrderRow
            Dim rowOrderRow As OrderRow = CType(Me.NewRow,OrderRow)
            rowOrderRow.ItemArray = New Object() {Nothing, Order, OrderQ, Price, TableNo, Cost}
            Me.Rows.Add(rowOrderRow)
            Return rowOrderRow
        End Function
        
        Public Function FindByID(ByVal ID As Integer) As OrderRow
            Return CType(Me.Rows.Find(New Object() {ID}),OrderRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OrderDataTable = CType(MyBase.Clone,OrderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OrderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnOrder = Me.Columns("Order")
            Me.columnOrderQ = Me.Columns("OrderQ")
            Me.columnPrice = Me.Columns("Price")
            Me.columnTableNo = Me.Columns("TableNo")
            Me.columnCost = Me.Columns("Cost")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnOrder = New DataColumn("Order", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrder)
            Me.columnOrderQ = New DataColumn("OrderQ", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrderQ)
            Me.columnPrice = New DataColumn("Price", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrice)
            Me.columnTableNo = New DataColumn("TableNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTableNo)
            Me.columnCost = New DataColumn("Cost", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCost)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
        End Sub
        
        Public Function NewOrderRow() As OrderRow
            Return CType(Me.NewRow,OrderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OrderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderRowChanged(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderRowChanging(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderRowDeleted(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderRowDeleting(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOrderRow(ByVal row As OrderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderRow
        Inherits DataRow
        
        Private tableOrder As OrderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrder = CType(Me.Table,OrderDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableOrder.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrder.IDColumn) = value
            End Set
        End Property
        
        Public Property Order As String
            Get
                Try 
                    Return CType(Me(Me.tableOrder.OrderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.OrderColumn) = value
            End Set
        End Property
        
        Public Property OrderQ As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrder.OrderQColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.OrderQColumn) = value
            End Set
        End Property
        
        Public Property Price As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrder.PriceColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.PriceColumn) = value
            End Set
        End Property
        
        Public Property TableNo As String
            Get
                Try 
                    Return CType(Me(Me.tableOrder.TableNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.TableNoColumn) = value
            End Set
        End Property
        
        Public Property Cost As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrder.CostColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.CostColumn) = value
            End Set
        End Property
        
        Public Function IsOrderNull() As Boolean
            Return Me.IsNull(Me.tableOrder.OrderColumn)
        End Function
        
        Public Sub SetOrderNull()
            Me(Me.tableOrder.OrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOrderQNull() As Boolean
            Return Me.IsNull(Me.tableOrder.OrderQColumn)
        End Function
        
        Public Sub SetOrderQNull()
            Me(Me.tableOrder.OrderQColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPriceNull() As Boolean
            Return Me.IsNull(Me.tableOrder.PriceColumn)
        End Function
        
        Public Sub SetPriceNull()
            Me(Me.tableOrder.PriceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTableNoNull() As Boolean
            Return Me.IsNull(Me.tableOrder.TableNoColumn)
        End Function
        
        Public Sub SetTableNoNull()
            Me(Me.tableOrder.TableNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCostNull() As Boolean
            Return Me.IsNull(Me.tableOrder.CostColumn)
        End Function
        
        Public Sub SetCostNull()
            Me(Me.tableOrder.CostColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OrderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OrderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OrderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OrderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
